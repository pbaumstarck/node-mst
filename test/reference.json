[
	"Testing 'where' ...",
	{
		"four": 16
	},
	{
		"three": 3,
		"four": 4
	},
	{
		"one": 1
	},
	{
		"one": 1,
		"two": 2
	},
	{
		"four": 16
	},
	"Testing 'select' ...",
	{
		"four": 16
	},
	{
		"one": 1,
		"two": 2,
		"three": 3,
		"four": 4
	},
	{
		"one": 1,
		"two": 4,
		"three": 9,
		"four": 16
	},
	{
		"one": 1,
		"oneone": 11,
		"two": 2,
		"twotwo": 22,
		"three": 3,
		"threethree": 33,
		"four": 4,
		"fourfour": 44
	},
	{
		"three": 3,
		"threethree": 39,
		"four": 4,
		"fourfour": 52
	},
	{
		"four": 16
	},
	"Testing 'each' ...",
	{
		"four": 16
	},
	4,
	3,
	"4> , 1, 2, 3, 4",
	", 1, 2, 3, 4",
	4,
	{
		"four": 16
	},
	"Testing 'sift' ...",
	{
		"false": {
			"one": 1,
			"two": 2
		},
		"true": {
			"three": 3,
			"four": 4
		}
	},
	{
		"true": {
			"one": 1
		},
		"null": {
			"two": 2
		},
		"undefined": {
			"three": 3
		},
		"false": {
			"four": 4
		}
	},
	"Testing 'toArray' ...",
	[
		1,
		2,
		3,
		4
	],
	[
		"one",
		"two",
		"three",
		"four"
	],
	[
		3,
		4
	],
	{
		"four": 16
	},
	"Testing 'replace' ...",
	{
		"four": 16
	},
	{
		"four": 16
	},
	{
		"four": 16
	},
	{
		"four": 16
	},
	{
		"four": 16
	},
	{
		"four": 16
	},
	{
		"four": 16
	},
	"Testing 'kernel' ...",
	"  undefined => 1 : undefined (0)",
	null,
	"  undefined => 66 : undefined (0)",
	null,
	"  0 => 1 : Array (1)",
	"  1 => 2 : Array (1)",
	"  2 => 9 : Array (1)",
	"  3 => 16 : Array (1)",
	"  4 => 25 : Array (1)",
	null,
	"  0 => 1 : Array (1)",
	"  1 => 2 : Array (1)",
	"  2 => 9,-9 : Array (1)",
	"  0 => 9 : Array (2)",
	"  1 => -9 : Array (2)",
	"  3 => 16 : Array (1)",
	"  4 => 25,-25 : Array (1)",
	"  0 => 25 : Array (2)",
	"  1 => -25 : Array (2)",
	null,
	"  a => foo : Object (1)",
	"  b => 1,2,3 : Object (1)",
	"  0 => 1 : Array (2)",
	"  1 => 2 : Array (2)",
	"  2 => 3 : Array (2)",
	"  c => [object Object] : Object (1)",
	"  dataset => glarm : Object (2)",
	"  Moose => [object Object] : Object (2)",
	"  0 => [object Object] : Array (3)",
	"  6 => 6! : Object (4)",
	"  Fie! => Upon't : Object (4)",
	null,
	"(d|dataset): glarm",
	"There are 7 literal values interred (4 for objects, and 3 for arrays)",
	"Testing 'equal' ...",
	"F: false",
	"T: true",
	"F: false",
	"T: true",
	"T: true",
	"F: false",
	"F: false",
	"T: true",
	"T: true",
	"F: false",
	"T: true",
	"F: false",
	"F: false",
	"Testing 'clone' ...",
	"1: 1",
	"foo: foo",
	"true: true",
	"[1,foo,true]: 1,foo,true",
	"  object1: 2,foo,true",
	"  object2: 1,foo,true",
	"{foo:1, bar:arr}: ",
	{
		"foo": 1,
		"bar": [
			2,
			"foo",
			true
		]
	},
	"  object1: ",
	{
		"foo": 2,
		"bar": [
			1,
			"foo",
			true
		]
	},
	"  object2: ",
	{
		"foo": 1,
		"bar": [
			2,
			"foo",
			true
		]
	},
	[
		"\"",
		"'"
	],
	[
		{
			"value": "as;ldfjka;sdlfja;sdfj asl;dkfja;skldfj;asd",
			"trimmed": "as;ldfjka;sdlfja;sdfj asl;dkfja;skldfj;asd",
			"delimiter": null
		}
	],
	"Original: as;ldfjka;sdlfja;sdfj asl;dkfja;skldfj;asd",
	"Reconst.: as;ldfjka;sdlfja;sdfj asl;dkfja;skldfj;asd",
	[
		"\"",
		"'"
	],
	[
		{
			"value": "'as;ldfjka;sdlfja;sdfj asl;dkfja;skldfj;asd'",
			"trimmed": "as;ldfjka;sdlfja;sdfj asl;dkfja;skldfj;asd",
			"delimiter": "'"
		}
	],
	"Original: 'as;ldfjka;sdlfja;sdfj asl;dkfja;skldfj;asd'",
	"Reconst.: 'as;ldfjka;sdlfja;sdfj asl;dkfja;skldfj;asd'",
	[
		"\"",
		"'"
	],
	[
		{
			"value": "\"as;ldfjka;sdlfja;sdfj asl;dkfja;skldfj;asd\"",
			"trimmed": "as;ldfjka;sdlfja;sdfj asl;dkfja;skldfj;asd",
			"delimiter": "\""
		}
	],
	"Original: \"as;ldfjka;sdlfja;sdfj asl;dkfja;skldfj;asd\"",
	"Reconst.: \"as;ldfjka;sdlfja;sdfj asl;dkfja;skldfj;asd\"",
	[
		"\"",
		"'"
	],
	[
		{
			"value": "And then ",
			"trimmed": "And then ",
			"delimiter": null
		},
		{
			"value": "'Big'",
			"trimmed": "Big",
			"delimiter": "'"
		},
		{
			"value": " jumped out and ",
			"trimmed": " jumped out and ",
			"delimiter": null
		},
		{
			"value": "\"Small \\\" came over and \"",
			"trimmed": "Small \\\" came over and ",
			"delimiter": "\""
		},
		{
			"value": " kicked ",
			"trimmed": " kicked ",
			"delimiter": null
		},
		{
			"value": "' Little \\'Tim \\' Tim '",
			"trimmed": " Little \\'Tim \\' Tim ",
			"delimiter": "'"
		},
		{
			"value": " Jenkins in the shin",
			"trimmed": " Jenkins in the shin",
			"delimiter": null
		}
	],
	"Original: And then 'Big' jumped out and \"Small \\\" came over and \" kicked ' Little \\'Tim \\' Tim ' Jenkins in the shin",
	"Reconst.: And then 'Big' jumped out and \"Small \\\" came over and \" kicked ' Little \\'Tim \\' Tim ' Jenkins in the shin",
	[
		"\"",
		"'"
	],
	[
		{
			"value": "'Single'",
			"trimmed": "Single",
			"delimiter": "'"
		},
		{
			"value": "\"Double\"",
			"trimmed": "Double",
			"delimiter": "\""
		},
		{
			"value": "''",
			"trimmed": "",
			"delimiter": "'"
		},
		{
			"value": "\"\"",
			"trimmed": "",
			"delimiter": "\""
		}
	],
	"Original: 'Single'\"Double\"''\"\"",
	"Reconst.: 'Single'\"Double\"''\"\"",
	[
		{
			"pre": "/*",
			"post": "*/"
		}
	],
	[
		{
			"value": "So i have ",
			"trimmed": "So i have ",
			"delimiter": null
		},
		{
			"value": "/* which should be a comment */",
			"trimmed": " which should be a comment ",
			"delimiter": {
				"pre": "/*",
				"post": "*/"
			}
		},
		{
			"value": " if that works //   ",
			"trimmed": " if that works //   ",
			"delimiter": null
		},
		{
			"value": "/* end end end ...",
			"trimmed": "/* end end end ...",
			"delimiter": {
				"pre": "/*",
				"post": "*/"
			}
		}
	],
	"Original: So i have /* which should be a comment */ if that works //   /* end end end ...",
	"Reconst.: So i have /* which should be a comment */ if that works //   /* end end end ...",
	[
		"\"",
		"'"
	],
	[
		{
			"value": "so ",
			"trimmed": "so ",
			"delimiter": null
		},
		{
			"value": "\"Double 'quote'\"",
			"trimmed": "Double 'quote'",
			"delimiter": "\""
		},
		{
			"value": " and ",
			"trimmed": " and ",
			"delimiter": null
		},
		{
			"value": "'single \"quote\"'",
			"trimmed": "single \"quote\"",
			"delimiter": "'"
		}
	],
	"Testing 'where' ...",
	[
		1,
		2,
		3,
		4
	],
	[
		3,
		4
	],
	[
		1
	],
	[
		1,
		2
	],
	{
		"items": [
			3,
			4
		],
		"ixes": [
			2,
			3
		]
	},
	"Testing 'select' ...",
	[
		1,
		2,
		3,
		4
	],
	[
		1,
		2,
		3,
		4
	],
	[
		1,
		4,
		9,
		16
	],
	[
		16,
		9,
		4,
		1
	],
	[
		9,
		16
	],
	[
		4,
		9
	],
	[
		9,
		4,
		1
	],
	[
		9,
		4
	],
	[
		9,
		4,
		1
	],
	[
		1,
		4,
		9
	],
	"Testing 'sift' ...",
	{
		"false": [
			1,
			2
		],
		"true": [
			3,
			4
		]
	},
	{
		"false": {
			"items": [
				1,
				2
			],
			"ixes": [
				0,
				1
			]
		},
		"true": {
			"items": [
				3,
				4
			],
			"ixes": [
				2,
				3
			]
		}
	},
	{
		"true": [
			1,
			1
		],
		"null": [
			2,
			2
		],
		"undefined": [
			3,
			3
		],
		"false": [
			4,
			4
		]
	},
	{
		"true": {
			"items": [
				1,
				1
			],
			"ixes": [
				0,
				4
			]
		},
		"null": {
			"items": [
				2,
				2
			],
			"ixes": [
				1,
				5
			]
		},
		"undefined": {
			"items": [
				3,
				3
			],
			"ixes": [
				2,
				6
			]
		},
		"false": {
			"items": [
				4,
				4
			],
			"ixes": [
				3,
				7
			]
		}
	},
	"Testing 'each' ...",
	[
		1,
		2,
		3,
		4,
		1,
		2,
		3,
		4
	],
	8,
	3,
	"-1> , 4, 3, 2, 1, 4, 3, 2, 1",
	"8> , 4, 1, 2, 3, 4",
	"6> , 4, 1, 2",
	"3> , 3, 2, 1",
	[
		0,
		0,
		0
	],
	[
		0,
		1,
		2
	],
	[
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	[
		[
			0,
			0,
			0
		],
		[
			0,
			1,
			2
		],
		[
			0,
			2,
			4
		]
	],
	[
		[
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			],
			[
				0,
				0,
				0
			]
		]
	],
	[
		[
			[
				"0:0:0",
				"0:0:1",
				"0:0:2"
			],
			[
				"0:1:0",
				"0:1:1",
				"0:1:2"
			],
			[
				"0:2:0",
				"0:2:1",
				"0:2:2"
			]
		],
		[
			[
				"1:0:0",
				"1:0:1",
				"1:0:2"
			],
			[
				"1:1:0",
				"1:1:1",
				"1:1:2"
			],
			[
				"1:2:0",
				"1:2:1",
				"1:2:2"
			]
		],
		[
			[
				"2:0:0",
				"2:0:1",
				"2:0:2"
			],
			[
				"2:1:0",
				"2:1:1",
				"2:1:2"
			],
			[
				"2:2:0",
				"2:2:1",
				"2:2:2"
			]
		]
	],
	"0:0:0",
	"0:0:1",
	"0:0:2",
	"0:1:0",
	"0:1:1",
	"0:1:2",
	"0:2:0",
	"0:2:1",
	"0:2:2",
	"1:0:0",
	"1:0:1",
	"1:0:2",
	"1:1:0",
	"1:1:1",
	"1:1:2",
	"1:2:0",
	"1:2:1",
	"1:2:2",
	"2:0:0",
	"2:0:1",
	"2:0:2",
	"2:1:0",
	"2:1:1",
	"2:1:2",
	"2:2:0",
	"2:2:1",
	"2:2:2",
	27,
	"1, 0, Array   0",
	"2, 1, 0, Array, Array   1,0",
	"3, 1, 1, Array, Array   1,1",
	"4, 1, 2, Array, Array   1,2",
	"5, 2, 0, 0, Array, Array, Array   2,0,0",
	"6, 2, 0, 1, Array, Array, Array   2,0,1",
	"7, 2, 0, 2, Array, Array, Array   2,0,2",
	"8, 3, Array   3",
	"null, 4, Array   4",
	"9, 5, 0, 0, Array, Array, Array   5,0,0",
	"10, 5, 0, 1, Array, Array, Array   5,0,1",
	"11, 5, 0, 2, Array, Array, Array   5,0,2",
	"12, 5, 1, 0, Array, Array, Array   5,1,0",
	"13, 5, 1, 1, Array, Array, Array   5,1,1",
	"14, 5, 1, 2, Array, Array, Array   5,1,2",
	"15, 5, 2, 0, Array, Array, Array   5,2,0",
	"16, 5, 2, 1, Array, Array, Array   5,2,1",
	"17, 5, 2, 2, Array, Array, Array   5,2,2",
	"18, 5, 2, 3, 0, Array, Array, Array, Array   5,2,3,0",
	"19, 5, 2, 3, 1, Array, Array, Array, Array   5,2,3,1",
	"20, 5, 2, 3, 2, Array, Array, Array, Array   5,2,3,2",
	"21, 6, 0, Array, Array   6,0",
	"22, 6, 1, Array, Array   6,1",
	"23, 6, 2, 0, Array, Array, Array   6,2,0",
	"24, 6, 2, 1, Array, Array, Array   6,2,1",
	25,
	"Testing 'colon' ...",
	[
		0,
		1,
		2,
		3
	],
	[
		1,
		2,
		3,
		4,
		5
	],
	[
		1,
		4,
		7,
		10,
		13,
		16
	],
	[],
	[
		1,
		-2,
		-5,
		-8,
		-11,
		-14
	],
	"Testing 'separate' ...",
	[
		[
			1
		],
		[
			3,
			4,
			5
		]
	],
	[
		[
			1,
			2
		]
	],
	[
		[
			1
		],
		[
			5
		]
	],
	[],
	[
		[
			1,
			2
		],
		[
			4,
			5
		]
	],
	"Testing 'histo' ...",
	{
		"1": 1,
		"2": 1,
		"3": 1,
		"4": 1,
		"5": 1
	},
	[
		[
			"1",
			1
		],
		[
			"2",
			1
		],
		[
			"3",
			1
		],
		[
			"4",
			1
		],
		[
			"5",
			1
		]
	],
	{
		"1": 1,
		"2": 1,
		"3": 2,
		"4": 2,
		"5": 2
	},
	[
		[
			"1",
			1
		],
		[
			"2",
			1
		],
		[
			"3",
			2
		],
		[
			"4",
			2
		],
		[
			"5",
			2
		]
	],
	"Testing 'stats' ...",
	{
		"mean": 5.5,
		"sum": 55,
		"count": 10,
		"min": 1,
		"max": 10,
		"stddev": 2.8722813232690143
	},
	{
		"mean": 5.5,
		"count": 10,
		"stddev": 2.8722813232690143
	},
	{
		"mean": 1.1428571428571428,
		"sum": 8,
		"count": 7,
		"min": 1,
		"max": 2,
		"stddev": 0.34992710611188277
	},
	[
		{
			"x": 1,
			"y": -1
		},
		{
			"x": 2,
			"y": -2
		},
		{
			"x": 3,
			"y": -3
		},
		{
			"x": 4,
			"y": -4
		},
		{
			"x": 5,
			"y": -5
		},
		{
			"x": 6,
			"y": -6
		},
		{
			"x": 7,
			"y": -7
		},
		{
			"x": 8,
			"y": -8
		},
		{
			"x": 9,
			"y": -9
		},
		{
			"x": 10,
			"y": -10
		}
	],
	{
		"x": {
			"mean": 5.5,
			"sum": 55,
			"count": 10,
			"min": 1,
			"max": 10,
			"stddev": 2.8722813232690143
		},
		"y": {
			"mean": -5.5,
			"sum": -55,
			"count": 10,
			"min": -10,
			"max": -1,
			"stddev": 2.8722813232690143
		}
	},
	"Testing the aggregates ('sum', 'prod', 'any', etc.) ...",
	55,
	0,
	3628800,
	true,
	false,
	false,
	true,
	"Testing 'replace' ...",
	[
		36,
		49,
		81,
		100
	],
	[
		36,
		49,
		81,
		100
	],
	[
		36,
		49,
		81,
		100
	],
	[
		36,
		49,
		81,
		100
	],
	[
		36,
		49,
		81,
		100
	],
	[
		36,
		49,
		81,
		100
	],
	[
		36,
		49,
		81,
		100
	],
	[
		36,
		49,
		81,
		-100,
		36,
		-49,
		-81,
		100
	],
	[
		36,
		49,
		81,
		-100,
		36,
		-49,
		-81,
		100
	],
	[
		36,
		49,
		81,
		-100,
		36,
		-49,
		-81,
		100
	],
	"Testing 'shuffle' ...",
	"Did 0 ...",
	"Did 100 ...",
	"Did 200 ...",
	"Did 300 ...",
	"Did 400 ...",
	"Did 500 ...",
	"Did 600 ...",
	"Did 700 ...",
	"Did 800 ...",
	"Did 900 ...",
	"Did 1000 ...",
	"Did 1100 ...",
	"Did 1200 ...",
	"Did 1300 ...",
	"Did 1400 ...",
	"Did 1500 ...",
	"Did 1600 ...",
	"Did 1700 ...",
	"Did 1800 ...",
	"Did 1900 ...",
	"All shuffle tests passed.",
	"Testing 'subsets' ...",
	"All:",
	[
		[
			"h1"
		],
		[
			"h2"
		],
		[
			"h3"
		],
		[
			"h4"
		],
		[
			"h1",
			"h2"
		],
		[
			"h1",
			"h3"
		],
		[
			"h1",
			"h4"
		],
		[
			"h2",
			"h3"
		],
		[
			"h2",
			"h4"
		],
		[
			"h3",
			"h4"
		],
		[
			"h1",
			"h2",
			"h3"
		],
		[
			"h1",
			"h2",
			"h4"
		],
		[
			"h1",
			"h3",
			"h4"
		],
		[
			"h2",
			"h3",
			"h4"
		],
		[
			"h1",
			"h2",
			"h3",
			"h4"
		]
	],
	"1:",
	[
		[
			"h1"
		],
		[
			"h2"
		],
		[
			"h3"
		],
		[
			"h4"
		]
	],
	"2-3:",
	[
		[
			"h1",
			"h2"
		],
		[
			"h1",
			"h3"
		],
		[
			"h1",
			"h4"
		],
		[
			"h2",
			"h3"
		],
		[
			"h2",
			"h4"
		],
		[
			"h3",
			"h4"
		],
		[
			"h1",
			"h2",
			"h3"
		],
		[
			"h1",
			"h2",
			"h4"
		],
		[
			"h1",
			"h3",
			"h4"
		],
		[
			"h2",
			"h3",
			"h4"
		]
	],
	"kernel:",
	[
		"h1",
		"h2",
		"h3",
		"h4",
		"h1,h2",
		"h1,h3",
		"h1,h4",
		"h2,h3",
		"h2,h4",
		"h3,h4",
		"h1,h2,h3",
		"h1,h2,h4",
		"h1,h3,h4",
		"h2,h3,h4",
		"h1,h2,h3,h4"
	],
	"Testing 'countMat' ...",
	[],
	[
		[
			0
		]
	],
	[
		[
			0
		],
		[
			1
		]
	],
	[
		[
			0,
			0
		],
		[
			0,
			1
		],
		[
			1,
			0
		],
		[
			1,
			1
		]
	],
	[
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			1
		],
		[
			0,
			0,
			2
		],
		[
			0,
			0,
			3
		],
		[
			0,
			1,
			0
		],
		[
			0,
			1,
			1
		],
		[
			0,
			1,
			2
		],
		[
			0,
			1,
			3
		],
		[
			0,
			2,
			0
		],
		[
			0,
			2,
			1
		],
		[
			0,
			2,
			2
		],
		[
			0,
			2,
			3
		],
		[
			1,
			0,
			0
		],
		[
			1,
			0,
			1
		],
		[
			1,
			0,
			2
		],
		[
			1,
			0,
			3
		],
		[
			1,
			1,
			0
		],
		[
			1,
			1,
			1
		],
		[
			1,
			1,
			2
		],
		[
			1,
			1,
			3
		],
		[
			1,
			2,
			0
		],
		[
			1,
			2,
			1
		],
		[
			1,
			2,
			2
		],
		[
			1,
			2,
			3
		]
	],
	[
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			1
		],
		[
			0,
			0,
			2
		],
		[
			0,
			0,
			3
		],
		[
			0,
			0.33333,
			0
		],
		[
			0,
			0.33333,
			1
		],
		[
			0,
			0.33333,
			2
		],
		[
			0,
			0.33333,
			3
		],
		[
			0,
			0.66666,
			0
		],
		[
			0,
			0.66666,
			1
		],
		[
			0,
			0.66666,
			2
		],
		[
			0,
			0.66666,
			3
		],
		[
			0,
			0.99999,
			0
		],
		[
			0,
			0.99999,
			1
		],
		[
			0,
			0.99999,
			2
		],
		[
			0,
			0.99999,
			3
		],
		[
			1,
			0,
			0
		],
		[
			1,
			0,
			1
		],
		[
			1,
			0,
			2
		],
		[
			1,
			0,
			3
		],
		[
			1,
			0.33333,
			0
		],
		[
			1,
			0.33333,
			1
		],
		[
			1,
			0.33333,
			2
		],
		[
			1,
			0.33333,
			3
		],
		[
			1,
			0.66666,
			0
		],
		[
			1,
			0.66666,
			1
		],
		[
			1,
			0.66666,
			2
		],
		[
			1,
			0.66666,
			3
		],
		[
			1,
			0.99999,
			0
		],
		[
			1,
			0.99999,
			1
		],
		[
			1,
			0.99999,
			2
		],
		[
			1,
			0.99999,
			3
		]
	],
	"# perms: 16384",
	"Within a factor of three in time?: true",
	"Equal?: true"
]